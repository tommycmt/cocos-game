{"version":3,"sources":["assets/scripts/Game.js","assets/scripts/Player.js","assets/scripts/star.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","score","displayName","tooltip","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","this","groundY","y","height","timer","starDuration","spawnNewStar","gameOver","stopAllActions","director","loadScene","update","dt","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","gainScore","string","toString","audioEngine","playEffect","jumpDuration","maxMoveSpeed","accel","jumpAudio","jumpAction","setJumpAction","runAction","accLeft","accRight","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","onDestroy","off","start","abs","x","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","event","keyCode","macro","KEY","a","d","pickRadius","getPlayerDistance","playerPos","getPosition","position","sub","mag","onPicked","destroy","opacityRatio","opacity","floor"],"mappings":"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","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    // Game.js\r\n    properties: {\r\n        // 这个属性引用了星星预制资源\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // 星星产生后消失时间的随机范围\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // 地面节点，用于确定星星生成的高度\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n\r\n        score: {\r\n            default: 0,\r\n            displayName: \"Score (player)\",\r\n            tooltip: \"The score of player\",\r\n        },\r\n\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        // 得分音效资源\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        }\r\n\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad: function () {\r\n        // 获取地平面的 y 轴坐标\r\n        this.groundY = this.ground.y + this.ground.height/2;\r\n        // 生成一个新的星星\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n        \r\n        \r\n        // 初始化计分\r\n        this.score = 0;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n    },\r\n    gameOver: function () {\r\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\r\n        cc.director.loadScene('game');\r\n    },\r\n\r\n    update: function (dt) {\r\n        // 每帧更新计时器，超过限度还没有生成新的星星\r\n        // 就会调用游戏失败逻辑\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // 使用给定的模板在场景中生成一个新节点\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n\r\n        \r\n        // 将新增的节点添加到 Canvas 节点下面\r\n        this.node.addChild(newStar);\r\n        \r\n        // 为星星设置一个随机位置\r\n        newStar.setPosition(this.getNewStarPosition());\r\n        newStar.getComponent('star').game = this;\r\n        // 重置计时器，根据消失时间范围随机取一个值\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\r\n        var maxX = this.node.width/2;\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // 返回星星坐标\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // 更新 scoreDisplay Label 的文字\r\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\r\n        // 播放得分音效\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n        // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad: function () {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);   \r\n    },\r\n\r\n    onDestroy () {\r\n        // 取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    \r\n    update: function (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n\r\n    setJumpAction: function () {\r\n        // 跳跃上升\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // 下落\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    onKeyDown (event) {\r\n        // set a flag when key pressed\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp (event) {\r\n        // unset a flag when key released\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n});","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n        pickRadius: 0,\r\n    },\r\n\r\n    getPlayerDistance: function () {\r\n        // 根据 player 节点位置判断距离\r\n        var playerPos = this.game.player.getPosition();\r\n        // 根据两点位置计算两点之间距离\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // 然后销毁当前星星节点\r\n        this.node.destroy();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore();\r\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n        this.game.spawnNewStar();\r\n\r\n        \r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    }\r\n});\r\n"],"sourceRoot":"/source/","file":"project.js"}